import { Component, OnInit, OnDestroy } from '@angular/core';
import * as THREE from 'three';
import { TleLoaderService, SatData } from '../../services/tle-loader.service';
import { MLHandoverService, SatelliteMetrics } from '../../services/ml-handover.service';
import OrbitControls from './orbit-controls';

/*
  NOTA: Para las fuentes futuristas, a√±ade esto al archivo CSS principal o index.html:
  
  En el <head> del index.html:
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Electrolize&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Audiowide&display=swap" rel="stylesheet">
  
  O en el archivo CSS:
  @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@100;200;300;400;500;600;700;800;900&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Exo+2:wght@100;200;300;400;500;600;700;800;900&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Electrolize&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Audiowide&display=swap');
  */

@Component({
  selector: 'app-starlink-visualizer',
  templateUrl: './starlink-visualizer.component.html',
  styleUrls: ['./starlink-visualizer.component.css']
})
export class StarlinkVisualizerComponent implements OnInit, OnDestroy {
  private scene!: THREE.Scene;
  private camera!: THREE.PerspectiveCamera;
  private renderer!: THREE.WebGLRenderer;
  private satsMesh: THREE.InstancedMesh | null = null;
  private instanceMatrix = new THREE.Matrix4();
  private ueMesh!: THREE.Mesh;
  private frameId = 0;
  private frustum = new THREE.Frustum();
  private frustumMatrix = new THREE.Matrix4();
  private worker: Worker | null = null;
  private lastWorkerFrameDate: Date = new Date();
  private workerBusy = false;

  currentMetrics: SatelliteMetrics | null = null; // üéØ FORZADO: Mantener siempre null para interfaz limpia
  userLat = 0;
  userLon = 0;
  hysteresis = 5;
  cooldown = 30;
  loadingFirstFrame = true;
  loadingProgress = 0; // porcentaje 0-100
  firstFrameSatCount = 0;
  firstFrameReceived = 0;
  loadingStartTime: number = 0;
  loadingEndTime: number = 0;
  loadingElapsedMs: number = 0;

  private SAT_SCALE = 1200; // üéØ AJUSTADO: Factor √≥ptimo para sat√©lites visibles (era 800, original 2399)
  timeMultiplier = 1; // Control de velocidad temporal (x1 por defecto)
  private simulatedDate = new Date();
  private useRealTime = true; // üéØ NUEVO: Flag para usar tiempo real vs simulado
  private lastRealTimeUpdate = 0; // üéØ NUEVO: Timestamp para control de actualizaci√≥n
  private earthMesh: THREE.Mesh | null = null;
  private earthWireframe: THREE.LineSegments | null = null;
  private earthGrid: THREE.LineSegments | null = null;
  private earthTexture: THREE.Texture | null = null;
  private isDetailedView = false;
  private readonly DETAIL_ZOOM_THRESHOLD = 0.15; // Umbral para vista detallada
  private satLabels: THREE.Sprite[] = [];
  private labelMaterial!: THREE.SpriteMaterial;
  private canvas2D!: HTMLCanvasElement;
  private context2D!: CanvasRenderingContext2D;


  // üéØ NUEVO: Sistema de correcci√≥n temporal para velocidades orbitales
  private orbitalTimeCorrection = 1.0; // Factor de correcci√≥n temporal (1.0 = sin correcci√≥n)
  private averageOrbitalVelocity = 7.66; // km/s - Velocidad orbital t√≠pica de Starlink
  private lastOrbitalMetricsUpdate = 0; // Timestamp de √∫ltima actualizaci√≥n

  // üéØ NUEVO: Sistema de selecci√≥n y tracking de sat√©lites
  private selectedSatelliteIndex: number | null = null; // √çndice del sat√©lite seleccionado
  private selectedSatelliteMesh: THREE.Mesh | null = null; // üéØ NUEVO: Mesh separado para sat√©lite seleccionado
  private selectedSatellitePosition: THREE.Vector3 | null = null; // üéØ ANTI-PARPADEO: Cache de posici√≥n
  private selectedSatelliteLine: THREE.Line | null = null; // üéØ NUEVO: L√≠nea del sat√©lite a la Tierra
  private raycaster = new THREE.Raycaster(); // Para detecci√≥n de clics en sat√©lites
  private mouse = new THREE.Vector2(); // Posici√≥n del mouse normalizada
  private isMouseDown = false; // Flag para controlar interacciones de mouse
  private mouseDownTime = 0; // Tiempo cuando se presion√≥ el mouse
  private readonly CLICK_TIME_THRESHOLD = 200; // Tiempo m√°ximo para considerar un clic (ms)

  // üéØ NUEVO: Sistema de visualizaci√≥n de √≥rbitas
  private orbitalTraces: THREE.Group | null = null;
  private orbitalTracesVisible = true; // Activado por defecto para calibraci√≥n
  private orbitalTraceMaterial: THREE.LineBasicMaterial | null = null;

  constructor(
    public tle: TleLoaderService,
    private ml: MLHandoverService
  ) { }

  async ngOnInit() {
    await this.tle.load();
    this.initThree();
    this.initializeLabelSystem();
    this.createEarth();
    this.createSatellites();
    this.createUE();
    this.animate();
  }

  ngOnDestroy() {
    cancelAnimationFrame(this.frameId);
    this.clearSatelliteLabels();
    this.deselectSatellite(); // üéØ NUEVO: Limpiar selecci√≥n de sat√©lite e indicador
    this.renderer.domElement.remove();
  }

  private controls!: OrbitControls;

  private initThree() {
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.001, 100);
    this.camera.position.set(0, 0, 0.5); // M√°s cerca y centrada
    this.camera.lookAt(0, 0, 0);
    this.renderer = new THREE.WebGLRenderer({ antialias: true });
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    // A√±adir el canvas al contenedor del componente
    const container = document.querySelector('.canvas-container') || document.body;
    container.appendChild(this.renderer.domElement);
    // OrbitControls sin inercia - control directo del rat√≥n
    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    this.controls.enableDamping = false; // Eliminar inercia completamente
    this.controls.enablePan = false;
    this.controls.minDistance = 0.12; // L√≠mite m√≠nimo fijo
    this.controls.maxDistance = 2;
    this.controls.rotateSpeed = 1.0; // Velocidad base
    this.controls.zoomSpeed = 1.0;

    // Listener para cambios de zoom
    this.controls.addEventListener('change', () => {
      this.updateCameraControls();
    });

    // üéØ NUEVO: Event listeners para selecci√≥n de sat√©lites
    this.setupSatelliteSelectionListeners();

    // A√±adir helper de ejes
    const axesHelper = new THREE.AxesHelper(0.2);
    this.scene.add(axesHelper);
    window.addEventListener('resize', () => {
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(window.innerWidth, window.innerHeight);
    });
  }


  private updateCameraControls() {
    const distance = this.camera.position.distanceTo(new THREE.Vector3(0, 0, 0));
    const wasDetailedView = this.isDetailedView;

    // L√≠mite m√≠nimo de zoom (no entrar en la Tierra)
    const MIN_DISTANCE = 0.12; // Ajusta seg√∫n necesites
    if (distance < MIN_DISTANCE) {
      // Forzar distancia m√≠nima
      const direction = this.camera.position.clone().normalize();
      this.camera.position.copy(direction.multiplyScalar(MIN_DISTANCE));
      this.controls.update();
    }

    // Zona de vista detallada con sensibilidad ajustada
    if (distance < this.DETAIL_ZOOM_THRESHOLD && distance >= MIN_DISTANCE && !this.isDetailedView) {
      // Entrar en vista detallada - sensibilidad m√°s baja para precisi√≥n
      this.isDetailedView = true;
      this.controls.rotateSpeed = 0.08; // üéØ AJUSTA AQU√ç: Sensibilidad inicial m√°s baja (era 0.05)
      this.controls.zoomSpeed = 0.2;    // üéØ AJUSTA AQU√ç: Zoom inicial m√°s lento (era 0.25)
      this.controls.minDistance = MIN_DISTANCE;
      console.log('[CAMERA] Entrando en vista detallada - sensibilidad reducida');
    } else if (distance >= this.DETAIL_ZOOM_THRESHOLD && this.isDetailedView) {
      // Salir de vista detallada - restaurar sensibilidad normal
      this.isDetailedView = false;
      this.controls.rotateSpeed = 0.3; // Velocidad normal
      this.controls.zoomSpeed = 1.0;   // Zoom normal
      this.controls.minDistance = MIN_DISTANCE;
      this.clearSatelliteLabels();
      console.log('[CAMERA] Saliendo de vista detallada - sensibilidad normal');
    }

    // Sensibilidad progresiva en zona detallada (m√°s cerca = m√°s preciso)
    if (distance < this.DETAIL_ZOOM_THRESHOLD && distance >= MIN_DISTANCE) {
      // Sensibilidad inversamente proporcional a qu√© tan cerca estemos
      const proximityFactor = distance / this.DETAIL_ZOOM_THRESHOLD; // 0.8 a 1.0

      // üéØ AJUSTA AQU√ç: Rango de sensibilidad progresiva
      // Valores m√°s bajos = m√°s lento y preciso
      this.controls.rotateSpeed = Math.max(0.05, 0.12 * proximityFactor); // Era 0.08 y 0.15
      this.controls.zoomSpeed = Math.max(0.1, 0.2 * proximityFactor);     // Era 0.15 y 0.25

      // Sensibilidad extra baja en zoom extremo para m√°xima precisi√≥n
      if (distance <= 0.125) {
        this.controls.rotateSpeed = 0.03; // üéØ AJUSTA AQU√ç: S√∫PER lento (era 0.05)
        this.controls.zoomSpeed = 0.08;   // üéØ AJUSTA AQU√ç: Zoom s√∫per lento (era 0.1)
      }
    }

    // Actualizar visibilidad de etiquetas y escala de sat√©lites
    if (this.isDetailedView !== wasDetailedView) {
      this.updateSatelliteLabels();
      this.updateSatelliteScale();
    }
  }

  // üéØ NUEVO: Sistema de selecci√≥n de sat√©lites

  private setupSatelliteSelectionListeners() {
    // Event listeners para selecci√≥n de sat√©lites con mouse
    this.renderer.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
    this.renderer.domElement.addEventListener('mouseup', this.onMouseUp.bind(this));
    this.renderer.domElement.addEventListener('mousemove', this.onMouseMove.bind(this));

    //console.log('[SELECTION] Event listeners para selecci√≥n de sat√©lites configurados');
  }

  private onMouseDown(event: MouseEvent) {
    this.isMouseDown = true;
    this.mouseDownTime = performance.now();
    this.updateMousePosition(event);
  }

  private onMouseUp(event: MouseEvent) {
    if (!this.isMouseDown) return;

    const clickDuration = performance.now() - this.mouseDownTime;
    
    //console.log(`[SELECTION] üñ±Ô∏è Mouse up - duraci√≥n: ${clickDuration.toFixed(0)}ms`);
    
    // Solo procesar como clic si fue un click r√°pido (no un drag)
    if (clickDuration < this.CLICK_TIME_THRESHOLD) {
      // üéØ NUEVO: Prevenir que los OrbitControls interfieran
      event.preventDefault();
      event.stopPropagation();
      
      this.updateMousePosition(event);
      
      // üéØ NUEVO: A√±adir un peque√±o delay para asegurar que el raycasting funcione
      setTimeout(() => {
        this.handleSatelliteSelection();
      }, 10);
    } else {
      //console.log(`[SELECTION] üîÑ Drag detectado (${clickDuration.toFixed(0)}ms) - no se selecciona`);
    }

    this.isMouseDown = false;
  }

  private onMouseMove(event: MouseEvent) {
    this.updateMousePosition(event);
  }

  private updateMousePosition(event: MouseEvent) {
    // Convertir coordenadas de mouse a coordenadas normalizadas (-1 a +1)
    const rect = this.renderer.domElement.getBoundingClientRect();
    this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
  }

  private handleSatelliteSelection() {
    //console.log('[SELECTION] üéØ Intentando seleccionar sat√©lite...');
    
    if (!this.satsMesh) {
      //console.log('[SELECTION] ‚ùå No hay satsMesh disponible');
      return;
    }

    if (!this.isDetailedView) {
      //console.log('[SELECTION] ‚ùå No est√°s en vista detallada. Haz zoom para seleccionar sat√©lites.');
      return;
    }

    //console.log(`[SELECTION] üîç Mouse en: (${this.mouse.x.toFixed(3)}, ${this.mouse.y.toFixed(3)})`);

    // Configurar raycaster con tolerancia ampliada
    this.raycaster.setFromCamera(this.mouse, this.camera);
    
    // üéØ NUEVO: Ampliar el threshold del raycaster para facilitar la selecci√≥n
    this.raycaster.params.Points = { threshold: 0.05 }; // M√°s tolerante
    this.raycaster.params.Line = { threshold: 0.005 };

    //console.log(`[SELECTION] üì° Raycaster configurado desde c√°mara hacia: (${this.raycaster.ray.direction.x.toFixed(3)}, ${this.raycaster.ray.direction.y.toFixed(3)}, ${this.raycaster.ray.direction.z.toFixed(3)})`);

    // Detectar intersecciones con los sat√©lites
    const intersections = this.raycaster.intersectObject(this.satsMesh);
    
    //console.log(`[SELECTION] üéØ Intersecciones encontradas: ${intersections.length}`);

    if (intersections.length > 0) {
      const intersection = intersections[0];
      const satelliteIndex = intersection.instanceId;
      
      console.log(`[SELECTION] ‚úÖ Intersecci√≥n detectada:`, {
        instanceId: satelliteIndex,
        distance: intersection.distance.toFixed(4),
        point: intersection.point
      });

      if (satelliteIndex !== undefined && satelliteIndex !== null) {
        this.selectSatellite(satelliteIndex);
      } else {
        console.log('[SELECTION] ‚ùå instanceId undefined o null');
      }
    } else {
      // üéØ NUEVO: M√©todo alternativo por proximidad si raycasting falla
      console.log('[SELECTION] üîç Raycasting fall√≥, intentando selecci√≥n por proximidad...');
      const proximityResult = this.selectByProximity();
      
      if (!proximityResult) {
        console.log('[SELECTION] üåå Clic en √°rea vac√≠a - deseleccionando');
        this.deselectSatellite();
      }
    }
  }

  // üéØ NUEVO: M√©todo de selecci√≥n por proximidad como fallback
  private selectByProximity(): boolean {
    if (!this.satsMesh) return false;

    const tempMatrix = new THREE.Matrix4();
    const position = new THREE.Vector3();
    const screenPosition = new THREE.Vector3();
    const mouseVector = new THREE.Vector2(this.mouse.x, this.mouse.y);
    
    let closestDistance = Infinity;
    let closestIndex = -1;
    const maxProximityDistance = 0.05; // Tolerancia en coordenadas de pantalla

    // Iterar sobre todos los sat√©lites visibles
    for (let i = 0; i < this.satsMesh.count; i++) {
      this.satsMesh.getMatrixAt(i, tempMatrix);
      position.setFromMatrixPosition(tempMatrix);
      
      // Proyectar posici√≥n 3D a coordenadas de pantalla
      screenPosition.copy(position);
      screenPosition.project(this.camera);
      
      // Calcular distancia 2D en pantalla
      const distance2D = mouseVector.distanceTo(new THREE.Vector2(screenPosition.x, screenPosition.y));
      
      if (distance2D < maxProximityDistance && distance2D < closestDistance) {
        closestDistance = distance2D;
        closestIndex = i;
      }
    }

    if (closestIndex >= 0) {
      console.log(`[SELECTION] üéØ Selecci√≥n por proximidad: sat√©lite ${closestIndex} (distancia: ${closestDistance.toFixed(4)})`);
      this.selectSatellite(closestIndex);
      return true;
    }

    return false;
  }

  private selectSatellite(index: number) {
    console.log(`[SELECTION] üõ∞Ô∏è Seleccionando sat√©lite ${index}`);

    // Deseleccionar sat√©lite anterior si existe
    this.deselectSatellite();

    // Establecer nuevo sat√©lite seleccionado
    this.selectedSatelliteIndex = index;
    console.log(`[SELECTION] üìå selectedSatelliteIndex establecido a: ${this.selectedSatelliteIndex}`);

    // üéØ NUEVO ENFOQUE: Crear mesh separado verde en lugar de cambiar colores
    this.createSelectedSatelliteIndicator(index);

    // üéØ NUEVO: Crear l√≠nea del sat√©lite hacia la Tierra
    this.createSatelliteToEarthLine(index);

    // Obtener informaci√≥n del sat√©lite
    const sats = this.tle.getAllSatrecs();
    if (sats[index]) {
      const satName = this.extractSatelliteName(sats[index], index);
      console.log(`[SELECTION] ‚úÖ Sat√©lite seleccionado: ${satName} (√≠ndice: ${index})`);
      
      // üéØ NUEVO: Mostrar posici√≥n actual del sat√©lite
      if (this.satsMesh) {
        const tempMatrix = new THREE.Matrix4();
        const position = new THREE.Vector3();
        this.satsMesh.getMatrixAt(index, tempMatrix);
        position.setFromMatrixPosition(tempMatrix);
        console.log(`[SELECTION] üìç Posici√≥n: (${position.x.toFixed(4)}, ${position.y.toFixed(4)}, ${position.z.toFixed(4)})`);
      }
    } else {
      console.log(`[SELECTION] ‚ùå No se encontr√≥ informaci√≥n del sat√©lite ${index}`);
    }
  }

  private deselectSatellite() {
    if (this.selectedSatelliteIndex === null) return;

    console.log(`[SELECTION] üîÑ Deseleccionando sat√©lite ${this.selectedSatelliteIndex}`);

    // üéØ NUEVO: Eliminar mesh del sat√©lite seleccionado
    this.removeSelectedSatelliteIndicator();
    
    // üéØ NUEVO: Eliminar l√≠nea del sat√©lite hacia la Tierra
    this.removeSatelliteToEarthLine();
    
    // üéØ ANTI-PARPADEO: Limpiar cache de posici√≥n
    this.selectedSatellitePosition = null;
    this.selectedSatelliteIndex = null;
  }

  // üéØ NUEVO: Crear indicador visual separado para sat√©lite seleccionado
  private createSelectedSatelliteIndicator(index: number) {
    if (!this.satsMesh) return;

    console.log(`[SELECTION-INDICATOR] üü¢ Creando indicador verde para sat√©lite ${index}`);

    // Obtener posici√≥n del sat√©lite seleccionado
    const tempMatrix = new THREE.Matrix4();
    const position = new THREE.Vector3();
    this.satsMesh.getMatrixAt(index, tempMatrix);
    position.setFromMatrixPosition(tempMatrix);

    // üéØ SOLUCION Z-FIGHTING: Crear geometr√≠a ligeramente m√°s grande y separada
    const geometry = new THREE.SphereGeometry(0.0008); // M√°s grande que el sat√©lite original (0.0002)
    const material = new THREE.MeshBasicMaterial({
      color: 0x00ff00, // Verde brillante
      transparent: false,
      opacity: 1.0,
      depthTest: true,
      depthWrite: true
    });

    // Crear mesh del indicador
    this.selectedSatelliteMesh = new THREE.Mesh(geometry, material);
    
    // üéØ SOLUCION Z-FIGHTING: Posicionar ligeramente hacia la c√°mara
    const directionToCamera = this.camera.position.clone().sub(position).normalize();
    const offsetPosition = position.clone().add(directionToCamera.multiplyScalar(0.0001));
    this.selectedSatelliteMesh.position.copy(offsetPosition);
    
    // üéØ ANTI-PARPADEO: Inicializar cache de posici√≥n
    this.selectedSatellitePosition = position.clone();
    
    // üéØ SOLUCION Z-FIGHTING: Render order m√°s alto para que se dibuje despu√©s
    this.selectedSatelliteMesh.renderOrder = 1;
    
    // A√±adir a la escena
    this.scene.add(this.selectedSatelliteMesh);
    
    console.log(`[SELECTION-INDICATOR] ‚úÖ Indicador verde creado en posici√≥n: (${offsetPosition.x.toFixed(4)}, ${offsetPosition.y.toFixed(4)}, ${offsetPosition.z.toFixed(4)})`);
  }

  // üéØ NUEVO: Crear l√≠nea del sat√©lite seleccionado hacia la Tierra
  private createSatelliteToEarthLine(index: number) {
    if (!this.satsMesh) return;

    console.log(`[SATELLITE-LINE] üåç Creando l√≠nea del sat√©lite ${index} hacia la Tierra`);

    // Obtener posici√≥n del sat√©lite seleccionado
    const tempMatrix = new THREE.Matrix4();
    const satellitePosition = new THREE.Vector3();
    this.satsMesh.getMatrixAt(index, tempMatrix);
    satellitePosition.setFromMatrixPosition(tempMatrix);

    // Centro de la Tierra
    const earthCenter = new THREE.Vector3(0, 0, 0);
    
    // Calcular direcci√≥n del sat√©lite hacia el centro de la Tierra
    const directionToEarth = earthCenter.clone().sub(satellitePosition).normalize();
    
    // Calcular punto en la superficie de la Tierra (radio = 0.1)
    const earthRadius = 0.1;
    const earthSurfacePoint = satellitePosition.clone().add(directionToEarth.multiplyScalar(satellitePosition.distanceTo(earthCenter) - earthRadius));

    // Crear geometr√≠a de l√≠nea
    const points = [
      satellitePosition.clone(),
      earthSurfacePoint.clone()
    ];

    const geometry = new THREE.BufferGeometry().setFromPoints(points);
    
    // Material de l√≠nea verde brillante
    const material = new THREE.LineBasicMaterial({
      color: 0x00ff00, // Verde brillante como el sat√©lite
      linewidth: 2,
      transparent: true,
      opacity: 0.8
    });

    // Crear l√≠nea
    this.selectedSatelliteLine = new THREE.Line(geometry, material);
    this.selectedSatelliteLine.renderOrder = 2; // Renderizar despu√©s del sat√©lite
    
    // A√±adir a la escena
    this.scene.add(this.selectedSatelliteLine);
    
    console.log(`[SATELLITE-LINE] ‚úÖ L√≠nea creada desde sat√©lite (${satellitePosition.x.toFixed(4)}, ${satellitePosition.y.toFixed(4)}, ${satellitePosition.z.toFixed(4)}) hacia superficie terrestre (${earthSurfacePoint.x.toFixed(4)}, ${earthSurfacePoint.y.toFixed(4)}, ${earthSurfacePoint.z.toFixed(4)})`);
  }

  // üéØ NUEVO: Eliminar indicador visual del sat√©lite seleccionado
  private removeSelectedSatelliteIndicator() {
    if (this.selectedSatelliteMesh) {
      console.log(`[SELECTION-INDICATOR] üóëÔ∏è Eliminando indicador verde`);
      this.scene.remove(this.selectedSatelliteMesh);
      
      // Limpiar geometr√≠a y material
      this.selectedSatelliteMesh.geometry.dispose();
      if (this.selectedSatelliteMesh.material instanceof THREE.Material) {
        this.selectedSatelliteMesh.material.dispose();
      }
      this.selectedSatelliteMesh = null;
    }
  }

  // üéØ NUEVO: Eliminar l√≠nea del sat√©lite hacia la Tierra
  private removeSatelliteToEarthLine() {
    if (this.selectedSatelliteLine) {
      console.log(`[SATELLITE-LINE] üóëÔ∏è Eliminando l√≠nea hacia la Tierra`);
      this.scene.remove(this.selectedSatelliteLine);
      
      // Limpiar geometr√≠a y material
      this.selectedSatelliteLine.geometry.dispose();
      if (this.selectedSatelliteLine.material instanceof THREE.Material) {
        this.selectedSatelliteLine.material.dispose();
      }
      this.selectedSatelliteLine = null;
    }
  }

  // üéØ NUEVO: Actualizar l√≠nea del sat√©lite hacia la Tierra
  private updateSatelliteToEarthLine(satellitePosition: THREE.Vector3) {
    if (!this.selectedSatelliteLine) return;

    try {
      // Centro de la Tierra
      const earthCenter = new THREE.Vector3(0, 0, 0);
      
      // Calcular direcci√≥n del sat√©lite hacia el centro de la Tierra
      const directionToEarth = earthCenter.clone().sub(satellitePosition).normalize();
      
      // Calcular punto en la superficie de la Tierra (radio = 0.1)
      const earthRadius = 0.1;
      const earthSurfacePoint = satellitePosition.clone().add(directionToEarth.multiplyScalar(satellitePosition.distanceTo(earthCenter) - earthRadius));

      // Actualizar puntos de la l√≠nea
      const points = [
        satellitePosition.clone(),
        earthSurfacePoint.clone()
      ];

      // Actualizar geometr√≠a
      this.selectedSatelliteLine.geometry.setFromPoints(points);
      this.selectedSatelliteLine.geometry.attributes['position'].needsUpdate = true;
    } catch (error) {
      console.warn(`[SATELLITE-LINE] Error actualizando l√≠nea: ${error}`);
    }
  }

  // üéØ NUEVO: Actualizar posici√≥n del indicador del sat√©lite seleccionado
  private updateSelectedSatelliteIndicator() {
    if (this.selectedSatelliteIndex === null || !this.selectedSatelliteMesh || !this.satsMesh) {
      return;
    }

    try {
      // Obtener nueva posici√≥n del sat√©lite seleccionado
      const tempMatrix = new THREE.Matrix4();
      const position = new THREE.Vector3();
      this.satsMesh.getMatrixAt(this.selectedSatelliteIndex, tempMatrix);
      position.setFromMatrixPosition(tempMatrix);

      // üéØ ANTI-PARPADEO: Validar que la posici√≥n sea v√°lida
      if (position.length() === 0 || !isFinite(position.x) || !isFinite(position.y) || !isFinite(position.z)) {
        // Si la posici√≥n no es v√°lida, usar la √∫ltima posici√≥n conocida
        if (this.selectedSatellitePosition) {
          position.copy(this.selectedSatellitePosition);
        } else {
          // Si no hay posici√≥n v√°lida, ocultar temporalmente el indicador
          this.selectedSatelliteMesh.visible = false;
          return;
        }
      } else {
        // Posici√≥n v√°lida - asegurar que el indicador sea visible y guardar cache
        this.selectedSatelliteMesh.visible = true;
        this.selectedSatellitePosition = position.clone();
      }

      // üéØ SOLUCION Z-FIGHTING: Mantener offset hacia la c√°mara en cada actualizaci√≥n
      const directionToCamera = this.camera.position.clone().sub(position).normalize();
      
      // üéØ ANTI-PARPADEO: Validar direcci√≥n hacia c√°mara
      if (!isFinite(directionToCamera.x) || !isFinite(directionToCamera.y) || !isFinite(directionToCamera.z)) {
        // Si la direcci√≥n no es v√°lida, usar offset fijo hacia arriba
        directionToCamera.set(0, 0, 1);
      }
      
      const offsetPosition = position.clone().add(directionToCamera.multiplyScalar(0.00001));
      
      // Actualizar posici√≥n del indicador con offset
      this.selectedSatelliteMesh.position.copy(offsetPosition);
      
      // üéØ NUEVO: Actualizar l√≠nea hacia la Tierra
      this.updateSatelliteToEarthLine(position);
    } catch (error) {
      // üéØ ANTI-PARPADEO: En caso de error, mantener indicador visible en √∫ltima posici√≥n conocida
      console.warn(`[SELECTION-INDICATOR] Error actualizando posici√≥n: ${error}`);
      if (this.selectedSatellitePosition && this.selectedSatelliteMesh) {
        this.selectedSatelliteMesh.visible = true;
        const directionToCamera = this.camera.position.clone().sub(this.selectedSatellitePosition).normalize();
        const offsetPosition = this.selectedSatellitePosition.clone().add(directionToCamera.multiplyScalar(0.0001));
        this.selectedSatelliteMesh.position.copy(offsetPosition);
        
        // üéØ NUEVO: Tambi√©n actualizar l√≠nea con posici√≥n cacheada
        this.updateSatelliteToEarthLine(this.selectedSatellitePosition);
      }
    }
  }

  // üéØ ELIMINADO: Ya no necesitamos estos m√©todos de color
  // private updateSatelliteColors() { ... }
  // private restoreColorsAfterMatrixUpdate() { ... }

  private initializeLabelSystem() {
    // Canvas para generar texturas de texto (ya no se usa este canvas espec√≠fico)
    this.canvas2D = document.createElement('canvas');
    this.canvas2D.width = 512;  // Mayor resoluci√≥n
    this.canvas2D.height = 128;
    this.context2D = this.canvas2D.getContext('2d')!;

    // Configurar calidad alta
    this.context2D.imageSmoothingEnabled = true;
    this.context2D.imageSmoothingQuality = 'high';

    // Material base para sprites de texto
    this.labelMaterial = new THREE.SpriteMaterial({
      transparent: true,
      alphaTest: 0.1
    });
  }

  private createTextTexture(text: string): THREE.Texture {
    // Canvas optimizado para texto n√≠tido y limpio
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 128;
    const ctx = canvas.getContext('2d')!;

    // Configuraci√≥n de m√°xima calidad
    ctx.imageSmoothingEnabled = false; // Desactivar para texto m√°s n√≠tido

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Configurar fuente moderna y limpia
    const fontSize = 30;
    ctx.font = `${fontSize}px "Segoe UI", "Roboto", "Inter", "SF Pro Display", system-ui, sans-serif`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';

    // Posici√≥n centrada
    const x = canvas.width / 2;
    const y = canvas.height / 2;

    // Calcular dimensiones del texto para el fondo
    const metrics = ctx.measureText(text);
    const textWidth = metrics.width;
    const textHeight = fontSize;

    // Padding para el fondo
    const padding = 8;
    const bgWidth = textWidth + padding * 2;
    const bgHeight = textHeight + padding * 2;

    // Fondo semi-transparente oscuro con bordes redondeados
    ctx.fillStyle = 'rgba(20, 25, 35, 0.85)'; // Fondo oscuro semi-transparente

    // Crear rect√°ngulo con bordes redondeados manualmente
    const radius = 6;
    const rectX = x - bgWidth / 2;
    const rectY = y - bgHeight / 2;

    ctx.beginPath();
    ctx.moveTo(rectX + radius, rectY);
    ctx.lineTo(rectX + bgWidth - radius, rectY);
    ctx.quadraticCurveTo(rectX + bgWidth, rectY, rectX + bgWidth, rectY + radius);
    ctx.lineTo(rectX + bgWidth, rectY + bgHeight - radius);
    ctx.quadraticCurveTo(rectX + bgWidth, rectY + bgHeight, rectX + bgWidth - radius, rectY + bgHeight);
    ctx.lineTo(rectX + radius, rectY + bgHeight);
    ctx.quadraticCurveTo(rectX, rectY + bgHeight, rectX, rectY + bgHeight - radius);
    ctx.lineTo(rectX, rectY + radius);
    ctx.quadraticCurveTo(rectX, rectY, rectX + radius, rectY);
    ctx.closePath();
    ctx.fill();

    // Texto principal blanco y n√≠tido
    ctx.fillStyle = '#FFFFFF';
    ctx.fillText(text, x, y);

    const texture = new THREE.CanvasTexture(canvas);
    texture.generateMipmaps = false;
    texture.minFilter = THREE.LinearFilter;
    texture.magFilter = THREE.LinearFilter;
    texture.format = THREE.RGBAFormat;
    texture.needsUpdate = true;

    return texture;
  }

  private updateSatelliteLabels() {
    if (!this.isDetailedView || !this.satsMesh) {
      this.clearSatelliteLabels();
      return;
    }

    // Limpiar etiquetas existentes
    this.clearSatelliteLabels();

    // Calcular frustum de la c√°mara con un margen m√°s amplio
    const frustum = new THREE.Frustum();
    const matrix = new THREE.Matrix4();
    matrix.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse);
    frustum.setFromProjectionMatrix(matrix);

    const sats = this.tle.getAllSatrecs();
    const tempMatrix = new THREE.Matrix4();
    const position = new THREE.Vector3();
    const cameraDistance = this.camera.position.distanceTo(new THREE.Vector3(0, 0, 0));

    // Radio de visibilidad m√°s generoso basado en el zoom
    let visibilityRadius: number;
    let maxLabels: number;

    if (cameraDistance <= 0.12) {
      // Zoom m√°ximo - mostrar todos los sat√©lites en un √°rea peque√±a
      visibilityRadius = 0.08;
      maxLabels = 50;
    } else if (cameraDistance <= 0.15) {
      // Zoom alto - √°rea moderada
      visibilityRadius = 0.12;
      maxLabels = 75;
    } else if (cameraDistance <= 0.2) {
      // Zoom medio - √°rea amplia
      visibilityRadius = 0.18;
      maxLabels = 100;
    } else {
      // Zoom bajo - √°rea muy amplia
      visibilityRadius = 0.25;
      maxLabels = 150;
    }

    let labelsCreated = 0;
    const candidateLabels: { sat: any, position: THREE.Vector3, index: number, distance: number }[] = [];

    // Primero, recopilar todos los candidatos v√°lidos
    for (let i = 0; i < Math.min(this.satsMesh.count, sats.length); i++) {
      this.satsMesh.getMatrixAt(i, tempMatrix);
      position.setFromMatrixPosition(tempMatrix);

      const distanceToCamera = this.camera.position.distanceTo(position);
      const distanceToCenter = position.distanceTo(new THREE.Vector3(0, 0, 0));

      // Criterios m√°s permisivos:
      // 1. Debe estar dentro del radio de visibilidad
      // 2. Debe estar fuera del n√∫cleo de la Tierra (radio > 0.102) - üéØ AJUSTADO para sat√©lites m√°s bajos
      // 3. Debe ser visible en pantalla (proyecci√≥n)
      if (distanceToCamera < visibilityRadius && distanceToCenter > 0.102) { // üéØ REDUCIDO para mostrar sat√©lites m√°s bajos
        // Verificar si es visible en pantalla usando proyecci√≥n
        const screenPosition = position.clone().project(this.camera);
        const isOnScreen = screenPosition.x >= -1.2 && screenPosition.x <= 1.2 &&
          screenPosition.y >= -1.2 && screenPosition.y <= 1.2 &&
          screenPosition.z >= -1 && screenPosition.z <= 1;

        if (isOnScreen) {
          candidateLabels.push({
            sat: sats[i],
            position: position.clone(),
            index: i,
            distance: distanceToCamera
          });
        }
      }
    }

    // Ordenar por distancia a la c√°mara (m√°s cercanos primero)
    candidateLabels.sort((a, b) => a.distance - b.distance);

    // Crear etiquetas hasta el l√≠mite, priorizando los m√°s cercanos
    for (let j = 0; j < Math.min(candidateLabels.length, maxLabels); j++) {
      const candidate = candidateLabels[j];
      this.createSatelliteLabel(candidate.sat, candidate.position, candidate.index, cameraDistance);
      labelsCreated++;
    }

    console.log(`[LABELS] Creadas ${labelsCreated}/${candidateLabels.length} etiquetas (candidatos encontrados) - zoom: ${cameraDistance.toFixed(3)} - radio: ${visibilityRadius.toFixed(3)}`);
  }

  private createSatelliteLabel(sat: any, position: THREE.Vector3, index: number, cameraDistance: number) {
    const satName = this.extractSatelliteName(sat, index);
    const texture = this.createTextTexture(satName);

    const spriteMaterial = new THREE.SpriteMaterial({
      map: texture,
      transparent: true,
      alphaTest: 0.01,
      depthTest: false,
      depthWrite: false,
      sizeAttenuation: false,
      blending: THREE.NormalBlending, // Blending normal para mejor legibilidad
      opacity: 1.0 // Opacidad completa
    });

    const sprite = new THREE.Sprite(spriteMaterial);

    // üéØ NUEVO: Offset inteligente que garantiza proximidad pero evita solapamientos
    const labelOffset = this.calculateSmartLabelOffset(position, index, cameraDistance);
    sprite.position.copy(position.clone().add(labelOffset));

    // Escala din√°mica basada en la distancia de la c√°mara
    const scaleFactor = this.calculateLabelScale(cameraDistance);
    sprite.scale.set(scaleFactor.x, scaleFactor.y, 1);

    sprite.userData = {
      satIndex: index,
      satName: satName,
      satellitePosition: position.clone() // Guardamos la posici√≥n del sat√©lite para referencia
    };

    this.scene.add(sprite);
    this.satLabels.push(sprite);
  }

  private updateExistingLabelsScale() {
    const cameraDistance = this.camera.position.distanceTo(new THREE.Vector3(0, 0, 0));
    const scaleFactor = this.calculateLabelScale(cameraDistance);

    this.satLabels.forEach((label, index) => {
      // Actualizar escala
      label.scale.set(scaleFactor.x, scaleFactor.y, 1);

      // üéØ NUEVO: Tambi√©n actualizar posici√≥n para mantener proximidad
      if (label.userData && label.userData['satellitePosition']) {
        const satellitePosition = label.userData['satellitePosition'] as THREE.Vector3;
        const satIndex = label.userData['satIndex'] || index;
        const newOffset = this.calculateSmartLabelOffset(satellitePosition, satIndex, cameraDistance);
        label.position.copy(satellitePosition.clone().add(newOffset));
      }
    });
  }

  private clearSatelliteLabels() {
    this.satLabels.forEach(label => {
      this.scene.remove(label);
      if (label.material.map) {
        label.material.map.dispose();
      }
      label.material.dispose();
    });
    this.satLabels = [];
  }
  private async createEarth() {
    const geo = new THREE.SphereGeometry(0.1, 64, 64); // üéØ Resoluci√≥n alta para suavidad

    // ÔøΩ NASA BLUE MARBLE: Textura profesional con calibraci√≥n astron√≥mica
    const loader = new THREE.TextureLoader();
    this.earthTexture = await new Promise<THREE.Texture>((resolve, reject) => {
      loader.load(
        'assets/blue_marble_nasa_proper.jpg', // üéØ NUEVA: Blue Marble NASA calibrada
        (texture) => {
          console.log('[EARTH] Blue Marble NASA calibrada cargada exitosamente');
          resolve(texture);
        },
        (progress) => {
          console.log('[EARTH] Progreso de carga:', (progress.loaded / progress.total * 100).toFixed(2) + '%');
        },
        (error) => {
          console.error('[EARTH] Error cargando Blue Marble NASA:', error);
          // Fallback a texturas de respaldo en orden de preferencia
          loader.load('assets/earth_4k_hd.jpg',
            resolve,
            undefined,
            () => loader.load('assets/earth_continents_bw.png', resolve, undefined, reject)
          );
        }
      );
    });

    // üéØ CONFIGURACI√ìN OPTIMIZADA PARA PROYECCI√ìN EQUIRECTANGULAR NASA
    this.earthTexture.wrapS = THREE.ClampToEdgeWrapping; // Sin repetici√≥n horizontal
    this.earthTexture.wrapT = THREE.ClampToEdgeWrapping; // Sin repetici√≥n vertical
    this.earthTexture.minFilter = THREE.LinearMipmapLinearFilter; // üéØ MEJORADO: Mejor filtrado para zoom
    this.earthTexture.magFilter = THREE.LinearFilter; // Filtrado para magnificaci√≥n
    this.earthTexture.generateMipmaps = true; // Mipmaps para mejor rendimiento
    this.earthTexture.flipY = true; // üéØ CORREGIDO: Blue Marble NASA S√ç necesita flip para orientaci√≥n correcta
    this.earthTexture.encoding = THREE.sRGBEncoding; // üéØ NUEVO: Encoding correcto para colores naturales
    this.earthTexture.anisotropy = this.renderer.capabilities.getMaxAnisotropy(); // üéØ NUEVO: Filtrado anisotr√≥pico m√°ximo

    console.log(`[EARTH] üéØ Filtrado anisotr√≥pico activado: ${this.earthTexture.anisotropy}x para m√°xima nitidez en zoom`);

    // üéØ MATERIAL MEJORADO con configuraci√≥n astron√≥mica
    const mat = new THREE.MeshBasicMaterial({
      map: this.earthTexture,
      transparent: false,
      opacity: 1.0,
      side: THREE.FrontSide // Solo cara frontal para mejor rendimiento
    });

    this.earthMesh = new THREE.Mesh(geo, mat);

    // üéØ PASO 2: Eliminar rotaciones forzadas - Orientaci√≥n natural de la Tierra
    // Sin rotaciones iniciales para ver la orientaci√≥n base de la textura
    this.earthMesh.rotation.x = 0;
    this.earthMesh.rotation.y = 0;
    this.earthMesh.rotation.z = 0;

    this.scene.add(this.earthMesh);
    // Wireframe moderno
    const wireframe = new THREE.WireframeGeometry(geo);
    this.earthWireframe = new THREE.LineSegments(wireframe, new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: 2 }));
    // üéØ PASO 2: Sin rotaciones forzadas - alineado con la Tierra
    this.earthWireframe.rotation.x = 0;
    this.earthWireframe.rotation.y = 0;
    this.earthWireframe.rotation.z = 0;
    this.earthWireframe.renderOrder = 1;
    this.scene.add(this.earthWireframe);
    // L√≠neas de latitud/longitud (grid)
    const gridGeo = new THREE.BufferGeometry();
    const gridVerts: number[] = [];
    const radius = 0.101;
    for (let lat = -60; lat <= 60; lat += 30) {
      for (let lon = 0; lon < 360; lon += 5) {
        const theta1 = THREE.MathUtils.degToRad(lon);
        const theta2 = THREE.MathUtils.degToRad(lon + 5);
        const phi = THREE.MathUtils.degToRad(lat);
        gridVerts.push(
          radius * Math.cos(phi) * Math.cos(theta1),
          radius * Math.cos(phi) * Math.sin(theta1),
          radius * Math.sin(phi),
          radius * Math.cos(phi) * Math.cos(theta2),
          radius * Math.cos(phi) * Math.sin(theta2),
          radius * Math.sin(phi)
        );
      }
    }
    for (let lon = 0; lon < 360; lon += 30) {
      for (let lat = -80; lat < 80; lat += 5) {
        const phi1 = THREE.MathUtils.degToRad(lat);
        const phi2 = THREE.MathUtils.degToRad(lat + 5);
        const theta = THREE.MathUtils.degToRad(lon);
        gridVerts.push(
          radius * Math.cos(phi1) * Math.cos(theta),
          radius * Math.cos(phi1) * Math.sin(theta),
          radius * Math.sin(phi1),
          radius * Math.cos(phi2) * Math.cos(theta),
          radius * Math.cos(phi2) * Math.sin(theta),
          radius * Math.sin(phi2)
        );
      }
    }
    gridGeo.setAttribute('position', new THREE.Float32BufferAttribute(gridVerts, 3));
    this.earthGrid = new THREE.LineSegments(gridGeo, new THREE.LineBasicMaterial({ color: 0xfffffff, opacity: 0.5, transparent: true }));
    // üéØ PASO 2: Sin rotaciones forzadas - alineado con la Tierra
    this.earthGrid.rotation.x = 0;
    this.earthGrid.rotation.y = 0;
    this.earthGrid.rotation.z = 0;
    this.earthGrid.renderOrder = 2;
    this.scene.add(this.earthGrid);

  }


  private createSatellites() {
    const sats = this.tle.getAllSatrecs();
    console.log(`[INIT] Creando ${sats.length} sat√©lites`);

    // Tama√±o razonable y color rojo puro
    const geometry = new THREE.SphereGeometry(0.0002);
    const material = new THREE.MeshBasicMaterial({
      color: 0xff0000,
      transparent: false,
      opacity: 1.0
    });
    this.satsMesh = new THREE.InstancedMesh(geometry, material, sats.length);
    
    // üéØ SOLUCION Z-FIGHTING: Render order m√°s bajo para sat√©lites originales
    this.satsMesh.renderOrder = 0;
    
    // üéØ ELIMINADO: Ya no necesitamos buffer de colores porque usamos mesh separado para selecci√≥n
    // const colors = new Float32Array(sats.length * 3);
    // for (let i = 0; i < sats.length; i++) { ... }
    // this.satsMesh.instanceColor = new THREE.InstancedBufferAttribute(colors, 3);
    
    this.scene.add(this.satsMesh);

    this.worker = new Worker('assets/orbital.worker.js');
    this.workerBusy = true;

    // Inicializar loading para el primer frame
    this.loadingFirstFrame = true;
    this.loadingProgress = 0;
    this.firstFrameSatCount = sats.length;
    this.firstFrameReceived = 0;
    this.loadingStartTime = performance.now();
    this.loadingEndTime = 0;
    this.loadingElapsedMs = 0;

    // Configurar el handler del worker UNA SOLA VEZ
    this.worker.onmessage = ({ data }) => {
      if (data.type === 'tles_ready') {
        console.log('[WORKER] TLEs ready, enviando primer propagate');
        this.workerBusy = false;
        // ENVIAR EL PRIMER PROPAGATE AQU√ç
        const frustumPlanes = this.updateFrustum();
        this.workerBusy = true;
        if (this.worker) {
          this.worker.postMessage({
            type: 'propagate',
            payload: {
              date: this.simulatedDate.toISOString(),
              frustumPlanes,
              uePosition: {
                x: this.ueMesh.position.x,
                y: this.ueMesh.position.y,
                z: this.ueMesh.position.z
              }
            }
          });
        }
      }
      else if (data.type === 'debug') {
        // üéØ DESHABILITADO: No aplicar correcci√≥n autom√°tica para evitar bucles
        const debugMsg = data.payload;
        // if (debugMsg.includes('vel=') && debugMsg.includes('km/s')) {
        //   // Extraer velocidad del mensaje de debug
        //   const velMatch = debugMsg.match(/vel=([\d.]+)km\/s/);
        //   if (velMatch) {
        //     const calculatedVel = parseFloat(velMatch[1]);
        //     // Calcular factor de correcci√≥n temporal
        //     this.orbitalTimeCorrection = this.averageOrbitalVelocity / calculatedVel;
        //     console.log(`[ORBITAL-SYNC] Velocidad calculada: ${calculatedVel.toFixed(3)} km/s`);
        //     console.log(`[ORBITAL-SYNC] Factor de correcci√≥n temporal: ${this.orbitalTimeCorrection.toFixed(4)}`);
        //   }
        // }
        console.log('[WORKER-DEBUG]', debugMsg);
      }
      else if (data.type === 'propagation_chunk') {
        // data.payload: { chunk: [{position, visible}], offset, total }
        this.updateSatellitePositionsChunk(data.payload.chunk, data.payload.offset);
        // Actualizar progreso
        if (this.loadingFirstFrame) {
          this.firstFrameReceived += data.payload.chunk.length;
          this.loadingProgress = Math.min(100, Math.round(100 * this.firstFrameReceived / this.firstFrameSatCount));
          console.log(`[CHUNK] Progreso: ${this.firstFrameReceived}/${this.firstFrameSatCount} (${this.loadingProgress}%)`);
        }
      }
      else if (data.type === 'propagation_complete' || data.type === 'propagation_result') {
        //console.log(`[WORKER] Frame completo (${data.type})`);
        // data.payload: [{position, visible}]
        this.updateSatellitePositions(data.payload);

        if (this.loadingFirstFrame) {
          this.loadingFirstFrame = false;
          this.loadingProgress = 100;
          this.loadingEndTime = performance.now();
          this.loadingElapsedMs = this.loadingEndTime - this.loadingStartTime;
          console.log(`[LOAD] Primer frame completo en ${this.loadingElapsedMs.toFixed(0)} ms.`);
        }

        // üéØ CORREGIDO: Sistema de tiempo con correcci√≥n temporal apropiada
        if (this.useRealTime) {
          // Usar tiempo real actual - sincronizaci√≥n perfecta con la realidad
          this.simulatedDate = new Date();
          //console.log(`[TIME-SYNC] Usando tiempo real: ${this.simulatedDate.toISOString()}`);
        } else {
          // Modo simulaci√≥n acelerada - NO aplicar correcci√≥n orbital en modo simulaci√≥n
          // La correcci√≥n orbital solo debe aplicarse si hay desincronizaci√≥n real
          const timeIncrement = 16.67 * this.timeMultiplier; // Sin correcci√≥n orbital artificial
          this.simulatedDate = new Date(this.simulatedDate.getTime() + timeIncrement);
          console.log(`[TIME-SIM] Tiempo simulado (x${this.timeMultiplier}): ${this.simulatedDate.toISOString()}`);
        }

        this.lastWorkerFrameDate = new Date(this.simulatedDate);
        this.workerBusy = false; // Listo para el siguiente frame
      }
    };

    // Enviar los TLEs al worker
    console.log('[WORKER] Enviando TLEs iniciales');
    this.worker.postMessage({
      type: 'init_tles',
      payload: {
        tleData: sats.map(sat => ({ line1: sat.line1, line2: sat.line2 }))
      }
    });
  }

  private createUE() {
    this.ueMesh = new THREE.Mesh(
      new THREE.SphereGeometry(0.0004),
      new THREE.MeshBasicMaterial({ color: 0xFFA500 })
    );
    this.ueMesh.position.set(0.1, 0, 0);
    this.scene.add(this.ueMesh);
  }
  private animate = () => {
    this.frameId = requestAnimationFrame(this.animate);

    // Actualizar controles sin damping - solo cuando hay cambios reales
    this.controls?.update();

    if (!this.worker || !this.satsMesh || !this.ueMesh) return;

    // Si el primer frame est√° cargando, solo renderiza y espera
    if (this.loadingFirstFrame) {
      this.renderer.render(this.scene, this.camera);
      return;
    }

    // Si el worker est√° ocupado, solo renderiza y espera
    if (this.workerBusy) {
      this.renderer.render(this.scene, this.camera);
      return;
    }

    // Actualizar las opacidades basadas en la decisi√≥n de handover
    const positions: THREE.Vector3[] = [];
    for (let i = 0; i < this.satsMesh.count; i++) {
      const matrix = new THREE.Matrix4();
      this.satsMesh.getMatrixAt(i, matrix);
      const position = new THREE.Vector3();
      position.setFromMatrixPosition(matrix);
      positions.push(position);
    }

    // üéØ ELIMINADO: No llamar updateSatelliteColors() en cada frame
    // Solo se llama cuando hay cambios de selecci√≥n

    // üéØ ASEGURAR: M√©tricas siempre null para mantener interfaz limpia
    this.currentMetrics = null;

    // Enviar al worker las nuevas posiciones a calcular
    const frustumPlanes = this.updateFrustum();
    this.workerBusy = true; // Bloquear hasta la siguiente respuesta
    this.worker.postMessage({
      type: 'propagate',
      payload: {
        date: this.simulatedDate.toISOString(),
        frustumPlanes,
        uePosition: {
          x: this.ueMesh.position.x,
          y: this.ueMesh.position.y,
          z: this.ueMesh.position.z
        }
      }
    });
    // Actualizar etiquetas y escala de sat√©lites si estamos en vista detallada
    if (this.isDetailedView) {
      if (this.frameId % 15 === 0) { // Cada 15 frames para regeneraci√≥n completa de etiquetas
        this.updateSatelliteLabels();
      } else if (this.frameId % 2 === 0) { // Cada 2 frames para actualizar posiciones y escalas (m√°s frecuente)
        this.updateExistingLabelsScale();
      }
    }

    // Actualizar escala de sat√©lites en todos los modos (no solo vista detallada)
    if (this.frameId % 10 === 0) { // Cada 10 frames para suavidad
      this.updateSatelliteScale();
    }

    // üéØ ANTI-PARPADEO: Actualizar indicador de selecci√≥n en cada frame para m√°xima suavidad
    this.updateSelectedSatelliteIndicator();

    this.renderer.render(this.scene, this.camera);
  };

  private updateSatellitePositions(satellites: { position: { x: number; y: number; z: number }; visible: boolean }[]) {
    if (!this.satsMesh) return;

    const cameraDistance = this.camera.position.distanceTo(new THREE.Vector3(0, 0, 0));
    const scale = this.calculateSatelliteScale(cameraDistance);

    satellites.forEach((sat, index) => {
      if (sat.visible) {
        // üéØ NUEVO: Usar coordenadas reales directas del worker (ya est√°n en escala visual correcta)
        const pos = new THREE.Vector3(
          sat.position.x, // Coordenadas ya escaladas correctamente en el worker
          sat.position.y,
          sat.position.z
        );

        // üéØ CORREGIDO: Solo alinear con el sistema Three.js + calibraci√≥n geogr√°fica
        // Aplicar rotaci√≥n para alinear con Three.js Y luego ajuste de calibraci√≥n
        pos.applyAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2);

        // Aplicar posici√≥n y escala din√°mica
        this.instanceMatrix.makeScale(scale, scale, scale);
        this.instanceMatrix.setPosition(pos.x, pos.y, pos.z);

        if (this.satsMesh) {
          this.satsMesh.setMatrixAt(index, this.instanceMatrix);
        }
      }
    });

    if (this.satsMesh.instanceMatrix) {
      this.satsMesh.instanceMatrix.needsUpdate = true;
    }

    // üéØ NUEVO: Actualizar posici√≥n del indicador del sat√©lite seleccionado
    this.updateSelectedSatelliteIndicator();

    // üéØ ELIMINADO: Ya no necesitamos restaurar colores porque usamos mesh separado
    // this.restoreColorsAfterMatrixUpdate();
  }
  private updateFrustum() {
    this.frustumMatrix.multiplyMatrices(
      this.camera.projectionMatrix,
      this.camera.matrixWorldInverse
    );
    this.frustum.setFromProjectionMatrix(this.frustumMatrix);
    return this.frustum.planes.map(plane => [plane.normal.x, plane.normal.y, plane.normal.z, plane.constant]);
  }

  updateUserPosition() {
    // üéØ MEJORADO: Usar conversi√≥n geogr√°fica precisa
    const position = this.geographicToCartesian(this.userLat, this.userLon, 0);

    if (this.ueMesh) {
      this.ueMesh.position.copy(position);
      console.log(`[UE-POS] Usuario ubicado en: lat=${this.userLat}¬∞, lon=${this.userLon}¬∞ -> (${position.x.toFixed(4)}, ${position.y.toFixed(4)}, ${position.z.toFixed(4)})`);
    }
  }

  private updateSatellitePositionsChunk(chunk: { position: { x: number; y: number; z: number }; visible: boolean }[], offset: number) {
    if (!this.satsMesh) return;

    const cameraDistance = this.camera.position.distanceTo(new THREE.Vector3(0, 0, 0));
    const scale = this.calculateSatelliteScale(cameraDistance);

    chunk.forEach((sat, i) => {
      if (sat.visible) {
        // üéØ NUEVO: Usar coordenadas reales directas del worker (ya est√°n en escala visual correcta)
        const pos = new THREE.Vector3(
          sat.position.x, // Coordenadas ya escaladas correctamente en el worker
          sat.position.y,
          sat.position.z
        );

        // üéØ CORREGIDO: Solo alinear con el sistema Three.js + calibraci√≥n geogr√°fica
        pos.applyAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2);


        // Aplicar posici√≥n y escala din√°mica
        this.instanceMatrix.makeScale(scale, scale, scale);
        this.instanceMatrix.setPosition(pos.x, pos.y, pos.z);

        if (this.satsMesh) {
          this.satsMesh.setMatrixAt(offset + i, this.instanceMatrix);
        }
      }
    });

    if (this.satsMesh.instanceMatrix) {
      this.satsMesh.instanceMatrix.needsUpdate = true;
    }

    // üéØ NUEVO: Actualizar posici√≥n del indicador del sat√©lite seleccionado
    this.updateSelectedSatelliteIndicator();

    // üéØ ELIMINADO: Ya no necesitamos restaurar colores porque usamos mesh separado
    // this.restoreColorsAfterMatrixUpdate();
  }

  private extractSatelliteName(sat: any, index: number): string {
    // Debug solo para los primeros 3 sat√©lites para no saturar
    if (index < 3) {
      console.log(`[DEBUG] Sat√©lite ${index}:`, sat);
    }

    // Verificar si hay un nombre directo
    if (sat.name && sat.name.trim() !== '') {
      return sat.name.trim();
    }

    // Intentar obtener del line0 si existe
    if (sat.line0 && sat.line0.trim() !== '') {
      return sat.line0.trim();
    }

    // Si no hay nombre directo, extraer del n√∫mero de cat√°logo de la l√≠nea 1
    if (sat.line1 && sat.line1.length >= 7) {
      const catalogNumber = sat.line1.substring(2, 7).trim();
      // Remover ceros a la izquierda si los hay
      const cleanNumber = catalogNumber.replace(/^0+/, '') || catalogNumber;
      return `STARLINK-${cleanNumber}`;
    }

    // Intentar extraer de line2 si line1 no funciona
    if (sat.line2 && sat.line2.length >= 7) {
      const catalogNumber = sat.line2.substring(2, 7).trim();
      const cleanNumber = catalogNumber.replace(/^0+/, '') || catalogNumber;
      return `STARLINK-${cleanNumber}`;
    }

    // Fallback √∫nico
    return `SAT-${index + 1}`;
  }
  private calculateLabelScale(cameraDistance: number): { x: number; y: number } {
    // Escala base para etiquetas tipo cuadro como en la imagen
    const baseScale = { x: 0.3, y: 0.08 };

    // Factor de escala adaptado al zoom
    let scaleFactor = 1;

    if (cameraDistance <= 0.12) {
      // Zoom m√°ximo - etiquetas peque√±as pero legibles
      scaleFactor = 0.75;
    } else if (cameraDistance <= 0.15) {
      // Zoom alto - etiquetas normales
      scaleFactor = 0.8;
    } else if (cameraDistance <= 0.2) {
      // Zoom medio - etiquetas est√°ndar
      scaleFactor = 1.0;
    } else if (cameraDistance <= 0.3) {
      // Zoom bajo - etiquetas m√°s grandes
      scaleFactor = 1.3;
    } else {
      // Sin zoom - etiquetas grandes
      scaleFactor = 1.6;
    }

    return {
      x: baseScale.x * scaleFactor,
      y: baseScale.y * scaleFactor
    };
  }

  /**
   * Calcula el factor de escala para los sat√©lites basado en la distancia de la c√°mara
   * Los sat√©lites se hacen m√°s peque√±os al acercarse (zoom in) para mejor visibilidad
   */
  private calculateSatelliteScale(cameraDistance: number): number {
    // Escala base para los sat√©lites
    const baseScale = 1.0;

    let scaleFactor = 1;

    if (cameraDistance <= 0.12) {
      // Zoom m√°ximo - sat√©lites m√°s peque√±os para no saturar la vista
      scaleFactor = 0.4;
    } else if (cameraDistance <= 0.15) {
      // Zoom alto - sat√©lites peque√±os
      scaleFactor = 0.6;
    } else if (cameraDistance <= 0.2) {
      // Zoom medio - sat√©lites tama√±o normal-peque√±o
      scaleFactor = 0.8;
    } else if (cameraDistance <= 0.3) {
      // Zoom bajo - sat√©lites tama√±o normal
      scaleFactor = 1.0;
    } else {
      // Sin zoom - sat√©lites m√°s grandes para vista general
      scaleFactor = 1.4;
    }

    return baseScale * scaleFactor;
  }

  /**
   * Actualiza el tama√±o de todos los sat√©lites basado en la distancia de la c√°mara
   */
  private updateSatelliteScale() {
    if (!this.satsMesh) return;

    const cameraDistance = this.camera.position.distanceTo(new THREE.Vector3(0, 0, 0));
    const scale = this.calculateSatelliteScale(cameraDistance);

    // Aplicar la escala a todas las instancias
    for (let i = 0; i < this.satsMesh.count; i++) {
      // Obtener la matriz actual
      this.satsMesh.getMatrixAt(i, this.instanceMatrix);

      // Extraer posici√≥n y rotaci√≥n, aplicar nueva escala
      const position = new THREE.Vector3();
      const quaternion = new THREE.Quaternion();
      const currentScale = new THREE.Vector3();
      this.instanceMatrix.decompose(position, quaternion, currentScale);

      // Crear nueva matriz con la escala actualizada
      this.instanceMatrix.compose(position, quaternion, new THREE.Vector3(scale, scale, scale));
      this.satsMesh.setMatrixAt(i, this.instanceMatrix);
    }

    if (this.satsMesh.instanceMatrix) {
      this.satsMesh.instanceMatrix.needsUpdate = true;
    }

    // üéØ NUEVO: Actualizar posici√≥n del indicador del sat√©lite seleccionado
    this.updateSelectedSatelliteIndicator();

    // üéØ ELIMINADO: Ya no necesitamos restaurar colores porque usamos mesh separado
    // this.restoreColorsAfterMatrixUpdate();
  }

  // üéØ NUEVO: Extraer elementos orbitales del TLE (formato manual robusto)
  private extractOrbitalElements(sat: any, index: number): any | null {
    try {
      if (!sat.line1 || !sat.line2) {
        console.warn(`[TLE-PARSER] Sat√©lite ${index}: TLE incompleto`);
        return null;
      }

      const line1 = sat.line1;
      const line2 = sat.line2;

      // Validar longitud de l√≠neas TLE
      if (line1.length !== 69 || line2.length !== 69) {
        console.warn(`[TLE-PARSER] Sat√©lite ${index}: Longitud TLE incorrecta`);
        return null;
      }

      // PARSEO MANUAL DE ELEMENTOS ORBITALES
      const elements: any = {
        // L√≠nea 1
        satelliteNumber: parseInt(line1.substring(2, 7)),
        epoch: parseFloat(line1.substring(18, 32)),
        meanMotionDot: parseFloat(line1.substring(33, 43)),
        meanMotionDotDot: parseFloat(line1.substring(44, 52)),
        bstar: parseFloat(line1.substring(53, 61)),

        // L√≠nea 2  
        inclination: parseFloat(line2.substring(8, 16)), // grados
        raan: parseFloat(line2.substring(17, 25)), // ascensi√≥n nodo, grados
        eccentricity: parseFloat('0.' + line2.substring(26, 33)), // sin punto decimal
        argumentOfPeriapsis: parseFloat(line2.substring(34, 42)), // grados
        meanAnomaly: parseFloat(line2.substring(43, 51)), // grados
        meanMotion: parseFloat(line2.substring(52, 63)), // rev/d√≠a

        // Datos calculados
        name: this.extractSatelliteName(sat, index)
      };

      // Calcular semi-eje mayor desde el movimiento medio
      // a¬≥ = (GM * T¬≤) / (4œÄ¬≤) donde T = 1440 min / meanMotion
      const GM = 398600.4418; // km¬≥/s¬≤ (constante gravitacional * masa Tierra)
      const minutesPerDay = 1440;
      const period = minutesPerDay / elements.meanMotion; // minutos
      const periodSeconds = period * 60; // segundos

      const semiMajorAxis = Math.pow((GM * periodSeconds * periodSeconds) / (4 * Math.PI * Math.PI), 1 / 3);
      elements.semiMajorAxis = semiMajorAxis; // km

      // Calcular altura del perigeo y apogeo
      const earthRadius = 6371; // km
      elements.perigeeHeight = semiMajorAxis * (1 - elements.eccentricity) - earthRadius;
      elements.apogeeHeight = semiMajorAxis * (1 + elements.eccentricity) - earthRadius;

      console.log(`[TLE-PARSER] ${elements.name}:`);
      console.log(`  Inclinaci√≥n: ${elements.inclination.toFixed(2)}¬∞`);
      console.log(`  Excentricidad: ${elements.eccentricity.toFixed(6)}`);
      console.log(`  Semi-eje mayor: ${elements.semiMajorAxis.toFixed(1)} km`);
      console.log(`  Altura perigeo: ${elements.perigeeHeight.toFixed(1)} km`);
      console.log(`  Altura apogeo: ${elements.apogeeHeight.toFixed(1)} km`);
      console.log(`  Per√≠odo: ${period.toFixed(1)} min`);

      return elements;
    } catch (error) {
      console.error(`[TLE-PARSER] Error parseando sat√©lite ${index}:`, error);
      return null;
    }
  }

  /* 
  // üéØ M√âTODO DE DIAGN√ìSTICO: Analizar elementos orbitales de los TLEs actuales
  public analyzeTLEOrbitalElements(): void {
    console.log('[TLE-ORBITAL-ANALYSIS] üîç Analizando elementos orbitales de los TLEs...');
    
    const sats = this.tle.getAllSatrecs();
    console.log(`[TLE-ORBITAL-ANALYSIS] Procesando ${sats.length} sat√©lites...`);
    
    sats.forEach((sat, index) => {
      const elements = this.extractOrbitalElements(sat, index);
      
      if (elements) {
        console.log(`\n[TLE-ORBITAL-ANALYSIS] === ${elements.name} ===`);
        console.log(`  üìä Altura del perigeo: ${elements.perigeeHeight.toFixed(1)} km`);
        console.log(`  üìä Altura del apogeo: ${elements.apogeeHeight.toFixed(1)} km`);
        console.log(`  üìä Excentricidad: ${elements.eccentricity.toFixed(6)} ${this.getEccentricityCategory(elements.eccentricity)}`);
        console.log(`  üìä Inclinaci√≥n: ${elements.inclination.toFixed(2)}¬∞ ${this.getInclinationCategory(elements.inclination)}`);
        console.log(`  üìä Per√≠odo orbital: ${(1440 / elements.meanMotion).toFixed(1)} minutos`);
        console.log(`  üìä Velocidad orbital promedio: ${this.calculateOrbitalVelocity(elements.semiMajorAxis).toFixed(2)} km/s`);
        
        // An√°lisis de la √©poca del TLE
        const epochAge = this.calculateEpochAge(elements.epoch);
        console.log(`  ‚è∞ √âpoca del TLE: ${epochAge.toFixed(1)} d√≠as ${epochAge > 30 ? 'üî¥ (MUY ANTIGUO)' : epochAge > 7 ? 'üü° (ANTIGUO)' : 'üü¢ (RECIENTE)'}`);
        
        // An√°lisis del coeficiente de drag
        if (elements.bstar < -0.0001) {
          console.log(`  üö® ALERTA: Coeficiente de drag muy alto (${elements.bstar.toExponential(2)}) - POSIBLE DEORBITADO`);
        }
      }
    });
  }

  // Helper: Categorizar excentricidad
  private getEccentricityCategory(eccentricity: number): string {
    if (eccentricity < 0.01) return 'üîµ (Circular)';
    if (eccentricity < 0.1) return 'üü¢ (Ligeramente el√≠ptica)';
    if (eccentricity < 0.3) return 'üü° (Moderadamente el√≠ptica)';
    return 'üî¥ (Muy el√≠ptica)';
  }

  // Helper: Categorizar inclinaci√≥n
  private getInclinationCategory(inclination: number): string {
    if (inclination < 10) return 'üîµ (Ecuatorial)';
    if (inclination < 30) return 'üü¢ (Baja)';
    if (inclination < 60) return 'üü° (Media)';
    if (inclination < 90) return 'üü† (Alta)';
    if (inclination < 110) return 'üî¥ (Polar)';
    return 'üü£ (Retr√≥grada)';
  }
*/
  // Helper: Calcular velocidad orbital promedio
  
  private calculateOrbitalVelocity(semiMajorAxis: number): number {
    const GM = 398600.4418; // km¬≥/s¬≤
    return Math.sqrt(GM / semiMajorAxis);
  }



  // Helper: Calcular edad de la √©poca del TLE
  private calculateEpochAge(epoch: number): number {
    // Convertir √©poca a fecha actual
    const year = Math.floor(epoch / 1000) + 2000;
    const dayOfYear = epoch % 1000;
    const epochDate = new Date(year, 0, dayOfYear);
    const now = new Date();
    return (now.getTime() - epochDate.getTime()) / (1000 * 60 * 60 * 24);
  }

  // üéØ M√âTODO SIMPLE: Calcular offset para etiquetas
  private calculateSmartLabelOffset(satellitePosition: THREE.Vector3, index: number, cameraDistance: number): THREE.Vector3 {
    // Offset base muy peque√±o para mantener las etiquetas pegadas
    let baseOffset = 0.0001; // Mucho m√°s peque√±o que antes

    // Ajustar offset seg√∫n el zoom - m√°s cerca = offset m√°s peque√±o
    if (cameraDistance <= 0.12) {
      baseOffset = 0.0008; // S√∫PER pegado en zoom m√°ximo
    } else if (cameraDistance <= 0.15) {
      baseOffset = 0.0008;  // Muy pegado en zoom alto
    } else if (cameraDistance <= 0.2) {
      baseOffset = 0.0002; // Pegado en zoom medio
    } else {
      baseOffset = 0.0002;  // Ligeramente separado en zoom bajo
    }

    // Calcular direcci√≥n desde el centro de la Tierra hacia el sat√©lite
    const earthCenter = new THREE.Vector3(0, 0, 0);
    const directionFromEarth = satellitePosition.clone().sub(earthCenter).normalize();

    // Calcular direcci√≥n hacia la c√°mara desde el sat√©lite
    const directionToCamera = this.camera.position.clone().sub(satellitePosition).normalize();

    // Combinar ambas direcciones para posicionar la etiqueta "hacia fuera" del sat√©lite
    // pero tambi√©n visible hacia la c√°mara
    const combinedDirection = directionFromEarth.clone()
      .multiplyScalar(0.7) // 70% hacia fuera de la Tierra
      .add(directionToCamera.multiplyScalar(0.3)); // 30% hacia la c√°mara

    combinedDirection.normalize();

    // Aplicar una peque√±a variaci√≥n angular para evitar solapamientos exactos
    // Solo cuando hay muchos sat√©lites muy cerca
    const variationAngle = (index % 4) * (Math.PI / 8); // Variaci√≥n de 0¬∞, 22.5¬∞, 45¬∞, 67.5¬∞
    const rotationAxis = new THREE.Vector3(0, 0, 1); // Rotar alrededor del eje Z

    // Solo aplicar variaci√≥n si estamos en zoom muy cercano y podr√≠a haber crowding
    if (cameraDistance <= 0.13) {
      combinedDirection.applyAxisAngle(rotationAxis, variationAngle * 0.3); // Variaci√≥n sutil
    }

    // Calcular el offset final
    const finalOffset = combinedDirection.multiplyScalar(baseOffset);

    //console.log(`[LABEL-OFFSET] Sat ${index}: offset=${baseOffset.toFixed(6)}, zoom=${cameraDistance.toFixed(3)}`);

    return finalOffset;
  }



  // üéØ M√âTODO AUXILIAR: Rotar la Tierra manualmente para pruebas
  public rotateEarth(xDeg: number, yDeg: number, zDeg: number): void {
    if (this.earthMesh) {
      this.earthMesh.rotation.x = THREE.MathUtils.degToRad(xDeg);
      this.earthMesh.rotation.y = THREE.MathUtils.degToRad(yDeg);
      this.earthMesh.rotation.z = THREE.MathUtils.degToRad(zDeg);

      // Tambi√©n rotar wireframe y grid
      if (this.earthWireframe) {
        this.earthWireframe.rotation.x = THREE.MathUtils.degToRad(xDeg);
        this.earthWireframe.rotation.y = THREE.MathUtils.degToRad(yDeg);
        this.earthWireframe.rotation.z = THREE.MathUtils.degToRad(zDeg);
      }
      if (this.earthGrid) {
        this.earthGrid.rotation.x = THREE.MathUtils.degToRad(xDeg);
        this.earthGrid.rotation.y = THREE.MathUtils.degToRad(yDeg);
        this.earthGrid.rotation.z = THREE.MathUtils.degToRad(zDeg);
      }

      console.log(`[COORDS] Tierra rotada a: X=${xDeg}¬∞, Y=${yDeg}¬∞, Z=${zDeg}¬∞`);
    }
  }

  // üéØ NUEVOS M√âTODOS: Control de posici√≥n del UE
  public moveUETo(lat: number, lon: number, alt: number = 0): void {
    console.log(`[UE-MOVE] üìç Moviendo UE a: lat=${lat}¬∞, lon=${lon}¬∞, alt=${alt}km`);

    // Actualizar las propiedades del componente
    this.userLat = lat;
    this.userLon = lon;

    // Calcular nueva posici√≥n usando nuestro sistema de coordenadas
    const position = this.geographicToCartesian(lat, lon, alt);

    if (this.ueMesh) {
      this.ueMesh.position.copy(position);
      console.log(`[UE-MOVE] ‚úÖ UE posicionado en: (${position.x.toFixed(4)}, ${position.y.toFixed(4)}, ${position.z.toFixed(4)})`);

      // Verificar que el UE est√© visible
      const distanceFromCenter = position.distanceTo(new THREE.Vector3(0, 0, 0));
      console.log(`[UE-MOVE] Distancia desde centro: ${distanceFromCenter.toFixed(4)} (Tierra radio: 0.1)`);

      // Hacer el UE m√°s grande para que sea m√°s visible
      if (this.ueMesh.scale.x < 2) {
        this.ueMesh.scale.set(2, 2, 2);
        console.log(`[UE-MOVE] UE escalado para mejor visibilidad`);
      }
    }
  }


  // üéØ M√âTODO SIMPLE: Conversi√≥n de coordenadas geogr√°ficas CORREGIDA
  private geographicToCartesian(lat: number, lon: number, alt: number = 0): THREE.Vector3 {
    const R = 6371; // Radio de la Tierra en km
    const radius = (R + alt) / R * 0.1; // Normalizado a escala del simulador

    // üö® CORRECCI√ìN FINAL: Intercambiar X y Z para alinear con textura Three.js
    // Coordenadas esf√©ricas est√°ndar: lat/lon -> x,y,z
    const phi = THREE.MathUtils.degToRad(90 - lat);   // Colatitud (0 = polo norte, 90 = ecuador)
    const theta = THREE.MathUtils.degToRad(lon + 90);      // Longitud (0 = Greenwich, + hacia este)

    // ‚úÖ F√ìRMULA CORREGIDA: Intercambio X ‚Üî Z para alinear correctamente
    const x = radius * Math.sin(phi) * Math.sin(theta);   // X = sin(theta) para longitudes correctas
    const y = radius * Math.cos(phi);                     // Y hacia arriba (polo norte) 
    const z = radius * Math.sin(phi) * Math.cos(theta);   // Z = cos(theta) para profundidad correcta

    return new THREE.Vector3(x, y, z);
  }



}
